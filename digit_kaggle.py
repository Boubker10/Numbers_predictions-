# -*- coding: utf-8 -*-
"""digit_kaggle.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IUkQSDD3sPR1auh_n8JVXHZ6hwGdFDRo
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

!unzip /content/train.csv.zip

train=pd.read_csv("/content/train.csv")
train

import numpy as np
import matplotlib.pyplot as plt


random_index = np.random.choice(len(train))


random_im = train.iloc[random_index, 1:].values.reshape(28, 28)


plt.imshow(random_im, cmap='gray')
plt.show()

!unzip /content/test.csv.zip

test=pd.read_csv('/content/test.csv')
test.head()

import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow.keras import layers, models
from sklearn.model_selection import train_test_split

train_data = pd.read_csv('/content/train.csv')
train_labels = train_data['label']
train_images = train_data.drop('label', axis=1).values.reshape(-1, 28, 28, 1) / 255.0

test_data = pd.read_csv('/content/test.csv')


test_images = test_data.values.reshape(-1, 28, 28, 1) / 255.0


model = models.Sequential([
    layers.Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1)),
    layers.MaxPooling2D(pool_size=(2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')
])


model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])


history=model.fit(train_images, train_labels, epochs=5)

test_loss, test_acc = model.evaluate(train_images, train_labels, verbose=2)
print('\nTest accuracy:', test_acc)

plt.figure(figsize=(12,6))
plt.subplot(1,2,1)
plt.title('Train Dataset')
plt.plot(history.history['loss'],label='train_loss')

plt.legend()
plt.subplot(1,2,2)
plt.title('Validation Dataset')
plt.plot(history.history['accuracy'],label='train_accuracy')

plt.legend()
plt.show()

import numpy as np
import matplotlib.pyplot as plt

def display_predictions(model, x_data, num_images=1):
    plt.figure(figsize=(10, 10))

    for i in range(num_images):
        idx = np.random.choice(len(x_data))
        img = x_data[idx]
        img_reshaped = img.reshape(1, 28, 28, 1)
        prediction = model.predict(img_reshaped)
        predicted_label = np.argmax(prediction, axis=1)[0]

        plt.subplot(4, 4, i + 1)
        plt.imshow(img.squeeze(), cmap='gray')
        plt.title(f'Predicted: {predicted_label}')
        plt.axis('off')

    plt.show()

display_predictions(model, test_images, num_images=16)